{
  "hash": "77a16698e125568f173bc0c970ff7ad9",
  "result": {
    "markdown": "---\ntitle: \"Dataset Size vs. Label Correctness: What is more important for training a model?\"\nauthor: \"Paul Simmering\"\ndate: \"2023-10-22\"\ncategories: [\"machine learning\"]\nimage: \"image.jpg\"\n---\n\nData labeled by analysts is a common source of training data for machine learning models. However, the quality of the labels can vary greatly, whether due to different interpretations of the task by different analysts, the inherent difficulty of the task or careless work.\n\nFor an organization looking to improve a model, they may either choose to re-label part of the data or collect more data. But how can they decide which option is better? I trained the same model 100 times on different number of examples with different amounts of label noise to find out.\n\nI'll use the IMDB movie review dataset as an example and train a transformer model to predict the sentiment of a movie review. This article loosely follows the [HuggingFace tutorial](https://huggingface.co/course/chapter1/3?fw=pt) on training a sentiment classifier.\n\n## Quick overview of the IMDB Movie Review Dataset\n\nIt's a dataset of 50,000 movie reviews from [IMDB](https://www.imdb.com), labeled as positive (1) or negative (0). The dataset is split into 25,000 training and 25,000 test reviews. Let's load it from [HuggingFace](https://huggingface.co/datasets/imdb) and have a look:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom datasets import load_dataset\n\nimdb = load_dataset(\"imdb\")\nimdb[\"train\"].to_pandas().head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>I rented I AM CURIOUS-YELLOW from my video sto...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>\"I Am Curious: Yellow\" is a risible and preten...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>If only to avoid making this type of film in t...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd the balanced label distribution in the training set:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimdb[\"train\"].to_pandas()[\"label\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nlabel\n0    12500\n1    12500\nName: count, dtype: int64\n```\n:::\n:::\n\n\n## Setup: Dataset size and label noise\n\n### Experiment grid\n\nThe next step is to define a grid of combinations of dataset size and label noise. As the actual accuracy achieved isn't the main point of this experiment, and many models have to be trained, I'll not use the full dataset. The dataset size will range from 1000 to 5,000 examples and the label noise (the percentage of labels that are flipped) will range from 0 to 25%.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nfrom itertools import product\n\ndataset_sizes = np.arange(1000, 5001, 1000)\nnoise_levels = np.arange(0, 0.25, 0.025)\n\ncombinations = list(product(dataset_sizes, noise_levels))\nprint(f\"Number of combinations: {len(combinations)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of combinations: 50\n```\n:::\n:::\n\n\n### Dataset subsampling\n\nOn each run, I'll subsample the training set to the desired size. To keep the balance of the labels intact, I'll subsample the positive and negative examples separately and then concatenate them. To reduce time spent on evaluating the model, I'll also subsample the test set to 2,000 examples.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom datasets import concatenate_datasets, Dataset\n\n\ndef subsample_hf_dataset(dataset: Dataset, max_size: int):\n    # Shuffle dataset\n    dataset = dataset.shuffle(seed=42)\n\n    # Separate datasets with labels 0 and 1\n    dataset_label_0 = dataset.filter(lambda example: example[\"label\"] == 0)\n    dataset_label_1 = dataset.filter(lambda example: example[\"label\"] == 1)\n\n    # Subsample datasets\n    subsampled_dataset_label_0 = dataset_label_0.select(range(max_size // 2))\n    subsampled_dataset_label_1 = dataset_label_1.select(range(max_size // 2))\n\n    # Concatenate subsampled datasets\n    return concatenate_datasets(\n        [subsampled_dataset_label_0, subsampled_dataset_label_1]\n    )\n\n\nimdb_train = subsample_hf_dataset(imdb[\"train\"], max(dataset_sizes))\nimdb_test = subsample_hf_dataset(imdb[\"train\"], 2000)\n```\n:::\n\n\n### Preprocessing\n\nThe transformer model expects the input to be tokenized and encoded. I'll use the [DistilBERT tokenizer](https://huggingface.co/distilbert-base-uncased) for this.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"distilbert-base-uncased\")\n\n\ndef preprocess_function(examples):\n    return tokenizer(examples[\"text\"], truncation=True)\n\n\ntokenized_train = imdb_train.map(preprocess_function, batched=True)\ntokenized_test = imdb_test.map(preprocess_function, batched=True)\n```\n:::\n\n\nNext, convert the datasets to PyTorch tensors and pad the sequences to the same length.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfrom transformers import DataCollatorWithPadding\n\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n```\n:::\n\n\n### Make some noise\n\nTo introduce label noise, I'll randomly flip the labels of a certain percentage of the training set. Again, I'll leave the balance of the labels intact.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom random import sample, seed\n\n\ndef flip_labels(dataset: Dataset, noise_level: float):\n    # make the operation deterministic\n    seed(42)\n\n    # get number of labels to flip\n    n = int(len(dataset) * noise_level)\n    n_by_class = n // 2\n\n    # get indices of labels to flip\n    neg_indices = [i for i, example in enumerate(dataset) if example[\"label\"] == 0]\n    pos_indices = [i for i, example in enumerate(dataset) if example[\"label\"] == 1]\n\n    selected_neg_indices = sample(neg_indices, n_by_class)\n    selected_pos_indices = sample(pos_indices, n_by_class)\n\n    # combine indices\n    indices_to_flip = selected_neg_indices + selected_pos_indices\n\n    # function to apply to flip the labels\n    def flip_labels_function(example, idx: int):\n        # flip the label if index is in the selected indices\n        # this is not the fastest way to do this, but it's easy to understand\n        if idx in indices_to_flip:\n            example[\"label\"] = 1 if example[\"label\"] == 0 else 0\n        return example\n\n    # apply function to flip the labels\n    return dataset.map(flip_labels_function, with_indices=True)\n\n```\n:::\n\n\nThis function will be used later in a loop.\n\n## Training the model\n\nFirst, we download a pre-trained transformer model that has not been fine-tuned for sentiment classification yet. One of the most commonly used models is [DistilBERT](https://huggingface.co/distilbert-base-uncased), a smaller, more efficient version of [BERT](https://huggingface.co/bert-base-uncased).\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfrom transformers import AutoModelForSequenceClassification\nimport torch\n\nmodel = AutoModelForSequenceClassification.from_pretrained(\n    \"distilbert-base-uncased\", num_labels=2\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'pre_classifier.weight', 'pre_classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n```\n:::\n:::\n\n\nNext, let's set the training arguments.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfrom transformers import TrainingArguments\n\ntrain_args = TrainingArguments(\n    learning_rate=2e-5,  # how fast the model learns\n    per_device_train_batch_size=16,  # how many training examples are processed at once\n    per_device_eval_batch_size=16,  # how many test examples are processed at once\n    num_train_epochs=2,  # how many times the model sees the training data\n    weight_decay=0.01,  # how much the model is penalized for being complex\n    output_dir=\"./results\",\n)\n```\n:::\n\n\nAfter training, we'll evaluate the model on the test set. The evaluation metric is accuracy, the percentage of correctly classified examples.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfrom datasets import load_metric\n\n\ndef compute_metrics(eval_pred):\n    load_accuracy = load_metric(\"accuracy\")\n\n    logits, labels = eval_pred\n    predictions = np.argmax(logits, axis=-1)\n    accuracy = load_accuracy.compute(predictions=predictions, references=labels)[\n        \"accuracy\"\n    ]\n    return {\"accuracy\": accuracy}\n\n```\n:::\n\n\nFinally, we have all the pieces to run the experiment. Let's put them together in an experiment function.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom transformers import Trainer\nimport time\n\n\ndef train_and_evaluate(dataset_size: int, noise_level: float) -> dict:\n    train_sub = subsample_hf_dataset(tokenized_train, dataset_size)\n    train_sub = flip_labels(train_sub, noise_level)\n\n    trainer = Trainer(\n        model=model,\n        args=train_args,\n        train_dataset=train_sub,\n        eval_dataset=tokenized_test,\n        tokenizer=tokenizer,\n        data_collator=data_collator,\n        compute_metrics=compute_metrics,\n    )\n\n    train_start = time.time()\n    trainer.train()\n    train_time = time.time() - train_start\n\n    evaluation = trainer.evaluate()\n\n    evaluation.update(\n        {\n            \"dataset_size\": dataset_size,\n            \"noise_level\": noise_level,\n            \"train_time\": train_time,\n        }\n    )\n\n    return evaluation\n\n```\n:::\n\n\nFinally, we can run the experiment and save the results to a CSV file.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimport pandas as pd\n\nresults = pd.DataFrame()\n\nfor dataset_size, noise_level in combinations:\n    evaluation = train_and_evaluate(dataset_size, noise_level)\n    results = pd.concat([results, pd.DataFrame([evaluation])])\n\n    with open(results_path, \"w\") as f:\n        pd.DataFrame(results).to_csv(f, index=False)\n```\n:::\n\n\nNote that this loop runs slowly unless you have a GPU available. Rather than actually running the experiment in a single loop on my laptop, I've combined the code in a [Python script](https://github.com/psimm/website/blog/correctness-vs-size/train.py) that parallelizes the experiment on [Modal](https://modal.com) using 10 A10G GPUs. Training cost was about $3 for 50 runs, which fits easily into the $30 monthly free tier.\n\n## Results\n\nLet's plot the accuracy achieved by the model for each combination of dataset size and label noise.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv(\"./results_from_modal.csv\")\n\n# Pivot the dataframe\npivot_df = df.pivot(index=\"train_size\", columns=\"noise_level\", values=\"eval_accuracy\")\n\n# Create text for hover tooltip\nhover_text = [\n    [\n        f\"Training examples: {y}<br>Noise level: {x}<br>Accuracy: {z}\"\n        for x, z in zip(pivot_df.columns, row)\n    ]\n    for y, row in zip(pivot_df.index, pivot_df.values)\n]\n\nfig = go.Figure(\n    data=go.Heatmap(\n        z=pivot_df.values,\n        x=pivot_df.columns.values,\n        y=pivot_df.index.values,\n        hovertext=hover_text,\n        hoverinfo=\"text\",\n        colorscale=\"Viridis\",\n        colorbar=dict(title=\"Accuracy\"),\n    )\n)\n\nfig.update_layout(\n    xaxis_title=\"Noise Level\",\n    yaxis_title=\"Training Examples\",\n)\n\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"8340f93b-b975-4c0b-9873-8efab0494486\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"8340f93b-b975-4c0b-9873-8efab0494486\")) {                    Plotly.newPlot(                        \"8340f93b-b975-4c0b-9873-8efab0494486\",                        [{\"colorbar\":{\"title\":{\"text\":\"Accuracy\"}},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"hoverinfo\":\"text\",\"hovertext\":[[\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.0\\u003cbr\\u003eAccuracy: 0.857\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.025\\u003cbr\\u003eAccuracy: 0.863\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.05\\u003cbr\\u003eAccuracy: 0.846\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.075\\u003cbr\\u003eAccuracy: 0.85\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.1\\u003cbr\\u003eAccuracy: 0.795\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.125\\u003cbr\\u003eAccuracy: 0.855\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.15\\u003cbr\\u003eAccuracy: 0.855\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.175\\u003cbr\\u003eAccuracy: 0.858\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.2\\u003cbr\\u003eAccuracy: 0.839\",\"Training examples: 1000\\u003cbr\\u003eNoise level: 0.225\\u003cbr\\u003eAccuracy: 0.845\"],[\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.0\\u003cbr\\u003eAccuracy: 0.877\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.025\\u003cbr\\u003eAccuracy: 0.873\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.05\\u003cbr\\u003eAccuracy: 0.87\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.075\\u003cbr\\u003eAccuracy: 0.866\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.1\\u003cbr\\u003eAccuracy: 0.869\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.125\\u003cbr\\u003eAccuracy: 0.863\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.15\\u003cbr\\u003eAccuracy: 0.873\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.175\\u003cbr\\u003eAccuracy: 0.86\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.2\\u003cbr\\u003eAccuracy: 0.87\",\"Training examples: 2000\\u003cbr\\u003eNoise level: 0.225\\u003cbr\\u003eAccuracy: 0.865\"],[\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.0\\u003cbr\\u003eAccuracy: 0.882\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.025\\u003cbr\\u003eAccuracy: 0.875\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.05\\u003cbr\\u003eAccuracy: 0.876\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.075\\u003cbr\\u003eAccuracy: 0.874\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.1\\u003cbr\\u003eAccuracy: 0.868\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.125\\u003cbr\\u003eAccuracy: 0.878\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.15\\u003cbr\\u003eAccuracy: 0.872\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.175\\u003cbr\\u003eAccuracy: 0.866\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.2\\u003cbr\\u003eAccuracy: 0.864\",\"Training examples: 3000\\u003cbr\\u003eNoise level: 0.225\\u003cbr\\u003eAccuracy: 0.858\"],[\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.0\\u003cbr\\u003eAccuracy: 0.891\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.025\\u003cbr\\u003eAccuracy: 0.886\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.05\\u003cbr\\u003eAccuracy: 0.883\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.075\\u003cbr\\u003eAccuracy: 0.891\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.1\\u003cbr\\u003eAccuracy: 0.874\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.125\\u003cbr\\u003eAccuracy: 0.878\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.15\\u003cbr\\u003eAccuracy: 0.877\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.175\\u003cbr\\u003eAccuracy: 0.874\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.2\\u003cbr\\u003eAccuracy: 0.865\",\"Training examples: 4000\\u003cbr\\u003eNoise level: 0.225\\u003cbr\\u003eAccuracy: 0.862\"],[\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.0\\u003cbr\\u003eAccuracy: 0.891\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.025\\u003cbr\\u003eAccuracy: 0.889\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.05\\u003cbr\\u003eAccuracy: 0.885\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.075\\u003cbr\\u003eAccuracy: 0.888\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.1\\u003cbr\\u003eAccuracy: 0.883\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.125\\u003cbr\\u003eAccuracy: 0.875\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.15\\u003cbr\\u003eAccuracy: 0.877\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.175\\u003cbr\\u003eAccuracy: 0.869\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.2\\u003cbr\\u003eAccuracy: 0.875\",\"Training examples: 5000\\u003cbr\\u003eNoise level: 0.225\\u003cbr\\u003eAccuracy: 0.88\"]],\"x\":[0.0,0.025,0.05,0.075,0.1,0.125,0.15,0.175,0.2,0.225],\"y\":[1000,2000,3000,4000,5000],\"z\":[[0.857,0.863,0.846,0.85,0.795,0.855,0.855,0.858,0.839,0.845],[0.877,0.873,0.87,0.866,0.869,0.863,0.873,0.86,0.87,0.865],[0.882,0.875,0.876,0.874,0.868,0.878,0.872,0.866,0.864,0.858],[0.891,0.886,0.883,0.891,0.874,0.878,0.877,0.874,0.865,0.862],[0.891,0.889,0.885,0.888,0.883,0.875,0.877,0.869,0.875,0.88]],\"type\":\"heatmap\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Noise Level\"}},\"yaxis\":{\"title\":{\"text\":\"Training Examples\"}}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('8340f93b-b975-4c0b-9873-8efab0494486');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nThe heatmap is interactive, so you can hover over the cells to see the exact accuracy achieved for each combination of dataset size and label noise.\n\nWhat can we learn from this plot?\n\n- The accuracy increases with the number of training examples, as expected.\n- Accuracy decreases with increasing label noise, as expected.\n- Even with a noise level of 0.25, the model can still achieve an accuracy of 0.88 with 5,000 training examples. This demonstrates a robustness to label noise.\n- Training a model is a stochastic process, so the accuracy varies between runs. This is especially true for small datasets. One run in particular stands out as a bad outlier.\n\nHow can number of examples and noise level be traded off? Let's find out with a regression model.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport statsmodels.formula.api as smf\n\n# Transform train_size to 1000s\ndf[\"train_size_1k\"] = df[\"train_size\"] / 1000\n\n# Transform noise level to percentage\ndf[\"noise_level_pct\"] = df[\"noise_level\"] * 100\n\n# Transform accuracy to percentage\ndf[\"eval_accuracy_pct\"] = df[\"eval_accuracy\"] * 100\n\nmodel = smf.ols(\"eval_accuracy_pct ~ train_size_1k + noise_level_pct\", data=df).fit()\n\n# Extract the coefficients, p-values and confidence intervals.\npd.DataFrame(\n    {\n        \"coef\": model.params,\n        \"p_value\": model.pvalues,\n        \"conf_int_lower\": model.conf_int()[0],\n        \"conf_int_upper\": model.conf_int()[1],\n    }\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>coef</th>\n      <th>p_value</th>\n      <th>conf_int_lower</th>\n      <th>conf_int_upper</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Intercept</th>\n      <td>85.323545</td>\n      <td>1.732287e-70</td>\n      <td>84.463578</td>\n      <td>86.183513</td>\n    </tr>\n    <tr>\n      <th>train_size_1k</th>\n      <td>0.793000</td>\n      <td>2.033479e-09</td>\n      <td>0.577395</td>\n      <td>1.008605</td>\n    </tr>\n    <tr>\n      <th>noise_level_pct</th>\n      <td>-0.070448</td>\n      <td>1.659046e-03</td>\n      <td>-0.112911</td>\n      <td>-0.027986</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe regression model provides coefficients that estimate the importance of each variable. All are significant at the 0.01 level.\n\nIn this simplified model, each percentage point of noise is worth as much as 11,000 examples. Note that the confidence intervals are quite wide and that the model's logic is failing at the extremes, e.g. a model with 0 examples wouldn't be able to achieve a baseline accuracy of 85%.\n\n## Conclusion\n\nIn this article, I've shown how to train a model on different amounts of data with different amounts of label noise. The results show that the model is rather robust to label noise, meaning that more data can make up for a certain amount of label noise. That doesn't mean that label noise is not a problem, but that prioritizing data collection over label correction can be a viable strategy.\n\nOne drawback of this experiment is that it only considers a single popular model and a single dataset. It would be interesting to see if the results generalize to other models and datasets.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.26.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}