{
  "hash": "bc77d729fe7b596011baef005cd31ff8",
  "result": {
    "markdown": "---\ntitle: \"One-stop NLP: Multi-task prompts for LLMs\"\nauthor: \"Paul Simmering\"\ndate: \"2023-10-29\"\ncategories: [\"machine learning\"]\nimage: \"knife.webp\"\nformat:\n    html:\n        mermaid: \n          theme: neutral\n---\n\nIn NLP, we often want to extract multiple pieces of information from a text. Each extraction task is typically done by one model. For example, we might want to classify the topic of a text, do named entity recognition and extract the sentiment. To build such a pipeline, we need to train three different models.\n\nWhat if we asked a large language model (LLM) to do it all in one step and return a god-view JSON object with all the structured information we need? That's the idea I'd like to explore in this article.\n\n![Illustration generated with DALLÂ·E 3](knife.webp)\n\nI'll use the [instructor](https://github.com/jxnl/instructor) package to describe the desired JSON object using a Pydantic model. Then I'll send the requests to the OpenAI API with the [texttunnel](https://github.com/qagentur/texttunnel) package. I'm the main developer of texttunnel.\n\n::: {.callout-note}\nThis article is an exploration, not a recommendation. Please refer to the last section for a discussion of the pros and cons of this approach.\n:::\n\n## Data: News articles\n\nLet's say we are building a news analysis tool.\n\nWe'll use the [cc_news](https://huggingface.co/datasets/cc_news) dataset from Hugging Face. It contains 708,241 English language news articles published between January 2017 and December 2019.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"cc_news\", split=\"train\")\n```\n:::\n\n\nWe won't be training a model in this article, so we'll just use the first 500 unique articles from the training set and run them through a pre-trained LLM. Let's load the data into a [Polars](https://www.pola.rs) dataframe and take a look at the first five rows.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport polars as pl\n\nnews = pl.from_arrow(dataset.data.table).unique(subset=\"text\").head(500)\n\nnews.head(5)\n\n# Save to disk for later use\nnews.write_parquet(\"news.parquet\")\n```\n:::\n\n\n## Defining the God-View JSON\n\n[Pydantic](https://docs.pydantic.dev/latest/) allows us to define a detailed schema for the JSON object we want to get from the LLM.\n\nThis is what it looks like:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfrom enum import Enum\nfrom typing import List\nfrom pydantic import BaseModel\nfrom instructor import OpenAISchema\n\n\n# Define the labels for the different tasks\nclass TopicLabel(Enum):\n    ARTS = \"ARTS\"\n    BUSINESS = \"BUSINESS\"\n    ENTERTAINMENT = \"ENTERTAINMENT\"\n    HEALTH = \"HEALTH\"\n    POLITICS = \"POLITICS\"\n    SCIENCE = \"SCIENCE\"\n    SPORTS = \"SPORTS\"\n    TECHNOLOGY = \"TECHNOLOGY\"\n\n\nclass SentimentLabel(Enum):\n    POSITIVE = \"POSITIVE\"\n    NEGATIVE = \"NEGATIVE\"\n    NEUTRAL = \"NEUTRAL\"\n\n\nclass NamedEntityLabel(Enum):\n    PERSON = \"PERSON\"\n    ORG = \"ORG\"\n    PRODUCT = \"PRODUCT\"\n    LOCATION = \"LOCATION\"\n    EVENT = \"EVENT\"\n\n\n# Define how named entities are represented\nclass NamedEntity(BaseModel):\n    text: str\n    label: NamedEntityLabel\n\n\n# Define the schema for the JSON object that\n# we want the LLM to return\nclass News(OpenAISchema):\n    topics: List[TopicLabel]\n    sentiment: SentimentLabel\n    named_entities: List[NamedEntity]\n\n```\n:::\n\n\nNow, how do we get the LLM to return this JSON object?\n\nThe OpenAI API has the [function calling](https://openai.com/blog/function-calling-and-other-api-updates) feature, which allows us to send a [JSON schema](https://json-schema.org) describing a Python function to the API. The model will respond with a JSON object that matches the schema.\n\nThe instructor package lets us take a Pydantic model and convert it to a JSON schema that we can send to the OpenAI API.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport pprint\n\nfunction_schema = News.openai_schema\n\npprint.pprint(function_schema)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'description': 'Correctly extracted `News` with all the required parameters '\n                'with correct types',\n 'name': 'News',\n 'parameters': {'$defs': {'NamedEntity': {'properties': {'label': {'$ref': '#/$defs/NamedEntityLabel'},\n                                                         'text': {'title': 'Text',\n                                                                  'type': 'string'}},\n                                          'required': ['text', 'label'],\n                                          'title': 'NamedEntity',\n                                          'type': 'object'},\n                          'NamedEntityLabel': {'enum': ['PERSON',\n                                                        'ORG',\n                                                        'PRODUCT',\n                                                        'LOCATION',\n                                                        'EVENT'],\n                                               'title': 'NamedEntityLabel',\n                                               'type': 'string'},\n                          'SentimentLabel': {'enum': ['POSITIVE',\n                                                      'NEGATIVE',\n                                                      'NEUTRAL'],\n                                             'title': 'SentimentLabel',\n                                             'type': 'string'},\n                          'TopicLabel': {'enum': ['ARTS',\n                                                  'BUSINESS',\n                                                  'ENTERTAINMENT',\n                                                  'HEALTH',\n                                                  'POLITICS',\n                                                  'SCIENCE',\n                                                  'SPORTS',\n                                                  'TECHNOLOGY'],\n                                         'title': 'TopicLabel',\n                                         'type': 'string'}},\n                'properties': {'named_entities': {'items': {'$ref': '#/$defs/NamedEntity'},\n                                                  'title': 'Named Entities',\n                                                  'type': 'array'},\n                               'sentiment': {'$ref': '#/$defs/SentimentLabel'},\n                               'topics': {'items': {'$ref': '#/$defs/TopicLabel'},\n                                          'title': 'Topics',\n                                          'type': 'array'}},\n                'required': ['named_entities', 'sentiment', 'topics'],\n                'type': 'object'}}\n```\n:::\n:::\n\n\nThis clearly defines what we want the LLM to return. It uses the `enum`, `required` and `properties` keywords from the JSON schema specification.\n\n## Sending requests\n\nNext, we need to send the requests to the OpenAI API. The texttunnel package makes this easy and efficient. We start by defining the requests. Each article is sent as a separate request.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom texttunnel import chat, models\nimport polars as pl\n\nnews = pl.read_parquet(\"news.parquet\")\n\nrequests = chat.build_requests(\n    model=models.GPT_3_5_TURBO,\n    function=function_schema,\n    system_message=\"Analyze news articles. Strictly stick to the allowed labels.\",\n    params=models.Parameters(max_tokens=1024),\n    texts=news[\"text\"].to_list(),\n    long_text_handling=\"truncate\",\n)\n\nprint(f\"Built {len(requests)} requests\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuilt 500 requests\n```\n:::\n:::\n\n\nAnd how much will it cost to send these requests?\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ncost_usd = sum([x.estimate_cost_usd() for x in requests])\n\nprint(f\"Estimated cost: ${cost_usd:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEstimated cost: $1.68\n```\n:::\n:::\n\n\nNext, let's set up a cache to store the responses. This way, we can experiment and never have to pay for the same request twice.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom aiohttp_client_cache import SQLiteBackend\nfrom pathlib import Path\n\ncache = SQLiteBackend(\"cache.sqlite\", allowed_methods=\"POST\")\n```\n:::\n\n\nThis will create a file called `cache.sqlite` in the current directory, which will hold a copy of the responses.\n\nNow we're ready to actually send the requests.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfrom texttunnel import processor\nimport logging\nimport pickle\n\nlogging.basicConfig(level=logging.INFO)\n\n# Setup logging for the texttunnel package\nlogging.getLogger(\"texttunnel\").setLevel(logging.INFO)\n\nlogging.info(f\"Sending {len(requests)} requests to the OpenAI API\")\n\nresponses = processor.process_api_requests(\n    requests=requests,\n    cache=cache,\n)\n\n# Save to disk for later use\nwith open(\"responses.pickle\", \"wb\") as f:\n    pickle.dump(responses, f)\n```\n:::\n\n\nThe texttunnel package sends the requests in parallel and caches the responses.\n\n## Results\n\n### Parsing and validation\n\nFor each request, `process_api_requests` returned a list containing two dicts: one containing the request, the other the API's response. Inside the response is the `arguments` key, which contains a string that should be parseable into a Python dict that matches the schema we defined.\n\nWe parse the responses and count the parsing errors.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport pickle\nfrom texttunnel import processor\n\nwith open(\"responses.pickle\", \"rb\") as f:\n    responses = pickle.load(f)\n\nparsing_errors = 0\n\n\ndef parse(response):\n    global parsing_errors\n    try:\n        return processor.parse_arguments(response)\n    except Exception:\n        parsing_errors += 1\n        return None\n\n\narguments = [parse(response) for response in responses]\n\nprint(f\"Parsing errors: {parsing_errors} out of {len(arguments)} responses\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nParsing errors: 3 out of 500 responses\n```\n:::\n:::\n\n\nNext, we verify that they conform to the schema we defined.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfrom pydantic import ValidationError\n\n\ndef validate(argument):\n    News.model_validate(argument)\n    return argument\n\n\ndef run_validation(arguments, validation_fun):\n    validation_errors = 0\n    out = []\n    for argument in arguments:\n        if argument is None:\n            # JSON parsing error\n            out.append(None)\n            continue\n        try:\n            argument = validation_fun(argument)\n            out.append(argument)\n        except ValidationError:\n            validation_errors += 1\n            out.append(None)\n\n    print(f\"Validation error in {validation_errors} out of {len(arguments)} responses\")\n\n    return out\n\n\nvalid_arguments = run_validation(arguments, validate)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValidation error in 130 out of 500 responses\n```\n:::\n:::\n\n\nThe LLM doesn't always follow the expected format. It adds extra labels to topics and entities that are not in the schema.\n\nThese can be fixed automatically. Let's try again.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndef fix_and_validate(argument):\n    fixed_argument = argument.copy()\n\n    topics = list(TopicLabel.__members__)\n\n    # Remove topics that are not in the schema\n    fixed_argument[\"topics\"] = [x for x in argument[\"topics\"] if x in topics]\n\n    entities = list(NamedEntityLabel.__members__)\n\n    if argument[\"named_entities\"] is not None:\n        fixed_argument[\"named_entities\"] = [\n            x for x in argument[\"named_entities\"] if x[\"label\"] in entities\n        ]\n\n    validate(fixed_argument)\n    return fixed_argument\n\n\nvalid_arguments = run_validation(arguments, fix_and_validate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValidation error in 0 out of 500 responses\n```\n:::\n:::\n\n\nRemoving the invalid labels fixed all validation errors.\n\nNext, let's bring the answers into a Polars dataframe.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nvalid_arguments = [x for x in valid_arguments if x is not None]\nanswers = pl.DataFrame(valid_arguments, orient=\"records\")\n\nprint(answers.head(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5, 3)\nââââââââââââââââââââââââââââââ¬ââââââââââââ¬ââââââââââââââââââââââââââââââââââââ\nâ topics                     â sentiment â named_entities                    â\nâ ---                        â ---       â ---                               â\nâ list[str]                  â str       â list[struct[2]]                   â\nââââââââââââââââââââââââââââââªââââââââââââªââââââââââââââââââââââââââââââââââââ¡\nâ [\"POLITICS\", \"TECHNOLOGY\"] â NEGATIVE  â [{\"James Clapper\",\"PERSON\"}, {\"Râ¦ â\nâ [\"POLITICS\", \"TECHNOLOGY\"] â NEGATIVE  â [{\"Canadian troops\",\"ORG\"}, {\"Maâ¦ â\nâ [\"BUSINESS\"]               â POSITIVE  â [{\"Moshe Kahlon\",\"PERSON\"}, {\"Isâ¦ â\nâ [\"BUSINESS\"]               â NEUTRAL   â [{\"Bailoy Irrigation Control Sysâ¦ â\nâ [\"SPORTS\"]                 â NEUTRAL   â [{\"Pep Guardiola\",\"PERSON\"}, {\"Bâ¦ â\nââââââââââââââââââââââââââââââ´ââââââââââââ´ââââââââââââââââââââââââââââââââââââ\n```\n:::\n:::\n\n\nNote that the topics and named entities are now represented as nested elements.\n\n### Visualization\n\nThe LLM's answers could be used to power a dashboard that shows the most common topics, positive and negative sentiment and the most frequently mentioned named entities. Let's get a preview of what that could look like.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimport plotly.express as px\n\ntopic_sentiment = (\n    answers.drop_nulls()\n    .explode(\"topics\")\n    # Sort for legend\n    .sort(\n        pl.when(pl.col(\"sentiment\") == \"POSITIVE\")\n        .then(pl.lit(0))\n        .when(pl.col(\"sentiment\") == \"NEUTRAL\")\n        .then(pl.lit(1))\n        .otherwise(pl.lit(2))\n    )\n)\n\nsentiment_colors = {\n    \"POSITIVE\": \"#98FB98\",\n    \"NEUTRAL\": \"#B0C4DE\",\n    \"NEGATIVE\": \"#F08080\",\n}\n\nfig = px.histogram(\n    data_frame=topic_sentiment,\n    x=\"topics\",\n    color=\"sentiment\",\n    barmode=\"group\",\n    labels={\"topics\": \"Topic\", \"sentiment\": \"Sentiment\"},\n    color_discrete_map=sentiment_colors,\n)\n\nfig.update_yaxes(title_text=\"Mentions\")\nfig.update_layout(title=\"Topic and sentiment distribution\")\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"35d4d4d5-0959-4b9b-b094-734a18577c26\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"35d4d4d5-0959-4b9b-b094-734a18577c26\")) {                    Plotly.newPlot(                        \"35d4d4d5-0959-4b9b-b094-734a18577c26\",                        [{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"Sentiment=POSITIVE\\u003cbr\\u003eTopic=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"POSITIVE\",\"marker\":{\"color\":\"#98FB98\",\"pattern\":{\"shape\":\"\"}},\"name\":\"POSITIVE\",\"offsetgroup\":\"POSITIVE\",\"orientation\":\"v\",\"showlegend\":true,\"xnull,\"SCIENCE\",\"ARTS\",\"ENTERTAINMENT\",\"ARTS\",\"BUSINESS\",\"BUSINESS\",\"ENTERTAINMENT\",\"HEALTH\",\"POLITICS\",\"SCIENCE\",\"SPORTS\",\"TECHNOLOGY\",\"SPORTS\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"HEALTH\",\"SPORTS\",\"SPORTS\",\"SPORTS\",\"BUSINESS\",\"TECHNOLOGY\",\"SPORTS\",\"SPORTS\",\"SPORTS\",\"BUSINESS\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"ENTERTAINMENT\",\"BUSINESS\",\"POLITICS\",null,\"SPORTS\",\"POLITICS\",null,\"POLITICS\",\"SCIENCE\",\"SPORTS\",\"SPORTS\",\"BUSINESS\",\"ARTS\",\"ENTERTAINMENT\",\"SPORTS\",\"ENTERTAINMENT\",\"ARTS\",\"SPORTS\",\"ENTERTAINMENT\",\"BUSINESS\",\"ENTERTAINMENT\",\"ENTERTAINMENT\",\"SPORTS\",\"SPORTS\",\"BUSINESS\",null,\"BUSINESS\",\"TECHNOLOGY\",\"ARTS\",\"SPORTS\",\"HEALTH\",null,\"TECHNOLOGY\",\"SPORTS\",null,\"ENTERTAINMENT\",\"ENTERTAINMENT\",\"ENTERTAINMENT\",\"SPORTS\",\"POLITICS\",\"ARTS\",\"SPORTS\",\"ENTERTAINMENT\",\"SPORTS\",\"ENTERTAINMENT\",\"ENTERTAINMENT\",\"BUSINESS\",\"ENTERTAINMENT\",\"SPORTS\",\"HEALTH\",\"SCIENCE\",\"ARTS\",\"ENTERTAINMENT\",\"BUSINESS\",\"BUSINESS\",\"ENTERTAINMENT\",\"ENTERTAINMENT\",\"BUSINESS\",\"ENTERTAINMENT\",\"ENTERTAINMENT\"],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"Sentiment=NEUTRAL\\u003cbr\\u003eTopic=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"NEUTRAL\",\"marker\":{\"color\":\"#B0C4DE\",\"pattern\":{\"shape\":\"\"}},\"name\":\"NEUTRAL\",\"offsetgroup\":\"NEUTRAL\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"BUSINESS\",\"SPORTS\",\"BUSINESS\",\"POLITICS\",\"POLITICS\",\"ENTERTAINMENT\",\"SPORTS\",\"BUSINESS\",\"HEALTH\",\"SCIENCE\",\"POLITICS\",\"POLITICS\",\"ENTERTAINMENT\",\"POLITICS\",\"HEALTH\",\"POLITICS\",\"ENTERTAINMENT\",\"BUSINESS\",\"POLITICS\",\"SPORTS\",\"ARTS\",\"TECHNOLOGY\",\"POLITICS\",\"SPORTS\",\"ENTERTAINMENT\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"BUSINESS\",\"TECHNOLOGY\",null,\"POLITICS\",\"BUSINESS\",\"ENTERTAINMENT\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"POLITICS\",\"TECHNOLOGY\",\"BUSINESS\",\"TECHNOLOGY\",\"SPORTS\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"TECHNOLOGY\",\"TECHNOLOGY\",\"SPORTS\",\"POLITICS\",\"BUSINESS\",\"TECHNOLOGY\",\"POLITICS\",\"SPORTS\",null,null,\"BUSINESS\",\"SPORTS\",\"HEALTH\",null,\"BUSINESS\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"TECHNOLOGY\",\"BUSINESS\",\"POLITICS\",\"ENTERTAINMENT\",\"SPORTS\",\"POLITICS\",\"SPORTS\",\"BUSINESS\",\"SPORTS\",\"POLITICS\",\"HEALTH\",\"POLITICS\",nullnull,\"TECHNOLOGY\",\"SPORTS\",\"POLITICS\",\"TECHNOLOGY\",nullnull,\"ENTERTAINMENT\",\"BUSINESS\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"BUSINESS\",\"SPORTS\",\"BUSINESS\",\"ENTERTAINMENT\",\"BUSINESS\",\"BUSINESS\",\"POLITICS\",\"ARTS\",null,\"POLITICS\",\"BUSINESS\",\"POLITICS\",\"BUSINESS\",\"BUSINESS\",\"POLITICS\",null,\"ARTS\",\"BUSINESS\",\"TECHNOLOGY\",\"BUSINESS\",null,\"BUSINESS\",\"TECHNOLOGY\",\"BUSINESS\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"SPORTS\",\"SPORTS\",\"TECHNOLOGY\",\"SPORTS\",\"BUSINESS\",\"HEALTH\",\"BUSINESS\",\"TECHNOLOGY\",null,nullnull,\"SPORTS\",\"BUSINESS\",\"SPORTS\",\"SPORTS\",null,\"BUSINESS\",\"TECHNOLOGY\",\"SCIENCE\",\"BUSINESS\",\"POLITICS\",\"TECHNOLOGY\",\"BUSINESS\",\"ENTERTAINMENT\",\"BUSINESS\",\"SPORTS\",\"BUSINESS\",\"TECHNOLOGY\",\"BUSINESS\",\"BUSINESS\",\"ARTS\",\"BUSINESS\",\"POLITICS\",\"SPORTS\",\"BUSINESS\",\"BUSINESS\",\"POLITICS\",\"HEALTH\",\"TECHNOLOGY\",\"ENTERTAINMENT\",\"BUSINESS\",\"SPORTS\",\"BUSINESS\",\"POLITICS\",\"SPORTS\",\"SPORTS\",\"HEALTH\",\"POLITICS\",\"ENTERTAINMENT\",\"SPORTS\",\"BUSINESS\",\"POLITICS\",\"BUSINESS\",\"ENTERTAINMENT\",\"BUSINESS\",\"SPORTS\",\"ARTS\",\"SPORTS\"],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"Sentiment=NEGATIVE\\u003cbr\\u003eTopic=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"NEGATIVE\",\"marker\":{\"color\":\"#F08080\",\"pattern\":{\"shape\":\"\"}},\"name\":\"NEGATIVE\",\"offsetgroup\":\"NEGATIVE\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"POLITICS\",\"TECHNOLOGY\",\"POLITICS\",\"TECHNOLOGY\",\"POLITICS\",\"ENTERTAINMENT\",\"BUSINESS\",\"POLITICS\",\"ENTERTAINMENT\",\"SPORTS\",\"POLITICS\",\"TECHNOLOGY\",\"SPORTS\",\"BUSINESS\",\"SPORTS\",null,\"BUSINESS\",null,null,\"BUSINESS\",\"POLITICS\",\"SPORTS\",\"ARTS\",\"POLITICS\",\"ARTS\",\"BUSINESS\",\"ENTERTAINMENT\",\"BUSINESS\",\"BUSINESS\",\"POLITICS\",\"TECHNOLOGY\",\"BUSINESS\",\"POLITICS\",\"BUSINESS\",null,null,\"POLITICS\",null,\"BUSINESS\",\"SPORTS\",\"TECHNOLOGY\",\"SPORTS\",\"POLITICS\",\"HEALTH\",null,\"POLITICS\",\"BUSINESS\",null,\"BUSINESS\",\"ENTERTAINMENT\",\"BUSINESS\",\"ENTERTAINMENT\",\"POLITICS\",\"BUSINESS\",\"BUSINESS\",\"POLITICS\",null,\"POLITICS\",null,null,\"POLITICS\",\"POLITICS\",null,\"BUSINESS\",\"POLITICS\",\"SPORTS\",\"POLITICS\",\"BUSINESS\",\"BUSINESS\",\"POLITICS\",\"POLITICS\",\"BUSINESS\",\"POLITICS\",\"HEALTH\",\"SCIENCE\",\"POLITICS\",null,\"POLITICS\",null,\"BUSINESS\",\"POLITICS\",null,\"SPORTS\",\"ARTS\",\"POLITICS\",\"BUSINESS\",\"POLITICS\",\"POLITICS\",\"ENTERTAINMENT\",\"POLITICS\",\"POLITICS\",\"SPORTS\",\"BUSINESS\",\"ENTERTAINMENT\",\"SPORTS\",null,null,\"ENTERTAINMENT\",\"POLITICS\",\"POLITICS\",\"BUSINESS\",\"BUSINESS\",\"SPORTS\",null,\"BUSINESS\",\"BUSINESS\",\"POLITICS\",\"POLITICS\",null,\"BUSINESS\",\"POLITICS\",\"BUSINESS\",\"POLITICS\",\"SPORTS\",\"POLITICS\",\"HEALTH\",\"SPORTS\",\"ENTERTAINMENT\",\"POLITICS\",\"SPORTS\",\"BUSINESS\",\"BUSINESS\",\"ENTERTAINMENT\",null,\"BUSINESS\",\"BUSINESS\",\"POLITICS\",\"SPORTS\",\"POLITICS\",\"BUSINESS\",null,null,\"BUSINESS\",\"POLITICS\",null,null,null,\"BUSINESS\",\"BUSINESS\",\"BUSINESS\",\"BUSINESS\",null,\"TECHNOLOGY\",\"TECHNOLOGY\",\"BUSINESS\",\"POLITICS\",\"POLITICS\",\"HEALTH\",\"POLITICS\",\"POLITICS\",\"POLITICS\",\"POLITICS\",\"POLITICS\",\"BUSINESS\",\"POLITICS\",\"BUSINESS\",\"ENTERTAINMENT\",\"POLITICS\",null,null,\"POLITICS\",\"BUSINESS\",\"POLITICS\",null],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Topic\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Mentions\"}},\"legend\":{\"title\":{\"text\":\"Sentiment\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"group\",\"title\":{\"text\":\"Topic and sentiment distribution\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('35d4d4d5-0959-4b9b-b094-734a18577c26');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nWe see that business, technology and politics are the most common topics. Politics topics are most commonly negative, while entertainment topics are most commonly positive.\n\n::: {.cell fig-height='500px' execution_count=14}\n``` {.python .cell-code}\nnamed_entities = (\n    answers.explode(\"named_entities\")\n    .unnest(\"named_entities\")\n    .group_by(\"text\", \"label\")\n    .agg(pl.count(\"label\").alias(\"count\"))\n    .sort(by=\"count\")\n    .drop_nulls()\n)\n\n# Top 5 named entities by label\ntop_named_entities = pl.concat(\n    [x.top_k(5, by=\"count\") for x in named_entities.partition_by(\"label\")]\n)\n\nfig = px.bar(\n    data_frame=top_named_entities,\n    facet_row=\"label\",\n    color=\"label\",\n    x=\"count\",\n    y=\"text\",\n    orientation=\"h\",\n    labels={\"count\": \"Mentions\"},\n)\n\nfig.update_yaxes(matches=None, title_text=\"\", autorange=\"reversed\")\nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[-1]))\nfig.update_layout(showlegend=False, title=\"Most frequent named entities by label\")\n\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"a14d4fe5-3c88-40bd-b633-f81fcf63a99e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a14d4fe5-3c88-40bd-b633-f81fcf63a99e\")) {                    Plotly.newPlot(                        \"a14d4fe5-3c88-40bd-b633-f81fcf63a99e\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"label=ORG\\u003cbr\\u003eMentions=%{x}\\u003cbr\\u003etext=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"ORG\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"ORG\",\"offsetgroup\":\"ORG\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[9,6,5,5,5],\"xaxis\":\"x5\",\"y\":[\"Dodgers\",\"Supreme Court\",\"FBI\",\"DRDO\",\"BJP\"],\"yaxis\":\"y5\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"label=PRODUCT\\u003cbr\\u003eMentions=%{x}\\u003cbr\\u003etext=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"PRODUCT\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"PRODUCT\",\"offsetgroup\":\"PRODUCT\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[4,4,4,3,3],\"xaxis\":\"x4\",\"y\":[\"Instagram\",\"Twitter\",\"The Flash\",\"Android\",\"iPhone\"],\"yaxis\":\"y4\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"label=PERSON\\u003cbr\\u003eMentions=%{x}\\u003cbr\\u003etext=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"PERSON\",\"marker\":{\"color\":\"#00cc96\",\"pattern\":{\"shape\":\"\"}},\"name\":\"PERSON\",\"offsetgroup\":\"PERSON\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[25,5,5,4,3],\"xaxis\":\"x3\",\"y\":[\"Donald Trump\",\"Trump\",\"Barack Obama\",\"Xi Jinping\",\"Wayne LaPierre\"],\"yaxis\":\"y3\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"label=EVENT\\u003cbr\\u003eMentions=%{x}\\u003cbr\\u003etext=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"EVENT\",\"marker\":{\"color\":\"#ab63fa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"EVENT\",\"offsetgroup\":\"EVENT\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[4,3,3,3,2],\"xaxis\":\"x2\",\"y\":[\"Friday\",\"World Cup\",\"Premiership\",\"Championship\",\"Super Bowl\"],\"yaxis\":\"y2\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"label=LOCATION\\u003cbr\\u003eMentions=%{x}\\u003cbr\\u003etext=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"LOCATION\",\"marker\":{\"color\":\"#FFA15A\",\"pattern\":{\"shape\":\"\"}},\"name\":\"LOCATION\",\"offsetgroup\":\"LOCATION\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[20,11,11,10,9],\"xaxis\":\"x\",\"y\":[\"China\",\"United States\",\"New York\",\"Las Vegas\",\"Australia\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.98],\"title\":{\"text\":\"Mentions\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.17600000000000002],\"title\":{\"text\":\"\"},\"autorange\":\"reversed\"},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.0,0.98],\"matches\":\"x\",\"showticklabels\":false},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.20600000000000002,0.382],\"title\":{\"text\":\"\"},\"autorange\":\"reversed\"},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.0,0.98],\"matches\":\"x\",\"showticklabels\":false},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.41200000000000003,0.5880000000000001],\"title\":{\"text\":\"\"},\"autorange\":\"reversed\"},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.0,0.98],\"matches\":\"x\",\"showticklabels\":false},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.618,0.794],\"title\":{\"text\":\"\"},\"autorange\":\"reversed\"},\"xaxis5\":{\"anchor\":\"y5\",\"domain\":[0.0,0.98],\"matches\":\"x\",\"showticklabels\":false},\"yaxis5\":{\"anchor\":\"x5\",\"domain\":[0.8240000000000001,1.0],\"title\":{\"text\":\"\"},\"autorange\":\"reversed\"},\"annotations\":[{\"font\":{},\"showarrow\":false,\"text\":\"LOCATION\",\"textangle\":90,\"x\":0.98,\"xanchor\":\"left\",\"xref\":\"paper\",\"y\":0.08800000000000001,\"yanchor\":\"middle\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"EVENT\",\"textangle\":90,\"x\":0.98,\"xanchor\":\"left\",\"xref\":\"paper\",\"y\":0.29400000000000004,\"yanchor\":\"middle\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"PERSON\",\"textangle\":90,\"x\":0.98,\"xanchor\":\"left\",\"xref\":\"paper\",\"y\":0.5,\"yanchor\":\"middle\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"PRODUCT\",\"textangle\":90,\"x\":0.98,\"xanchor\":\"left\",\"xref\":\"paper\",\"y\":0.706,\"yanchor\":\"middle\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"ORG\",\"textangle\":90,\"x\":0.98,\"xanchor\":\"left\",\"xref\":\"paper\",\"y\":0.912,\"yanchor\":\"middle\",\"yref\":\"paper\"}],\"legend\":{\"title\":{\"text\":\"label\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\",\"showlegend\":false,\"title\":{\"text\":\"Most frequent named entities by label\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('a14d4fe5-3c88-40bd-b633-f81fcf63a99e');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nThe most common people are American politicians. Products are dominated by tech products. Events are dominated by Sports events. China stands out as the most commonly mentioned location.\n\n::: {.callout-caution title=\"Unvalidated model\"}\nAll of this is based on zero shot classification and zero shot named entity recognition. We don't have a validation set, so we don't know how accurate the model is. For production use, this would need to be tested.\n:::\n\n## Discussion\n\nThe one-stop approach is diametrically opposed to Matthew Honnibal's article [\"Against LLM Maximalism\"](https://explosion.ai/blog/against-llm-maximalism).\n\n> They [LLMs] are extremely useful, but if you want to deliver reliable software you can improve over time, you canât just write a prompt and call it a day\n\nThe alternate pipeline with a modular approach of specialized models could look like this:\n\n\n```{mermaid}\ngraph LR\n    A([Text]) --> B[Topic Classification]\n    B --> C[Sentiment analysis]\n    C --> D[Named Entities]\n```\n\n\nExplosion AI's [spaCy](https://spacy.io) package is excellent for constructing such pipelines. With the extension [spacy-llm](https://github.com/explosion/spacy-llm), it can also feature LLMs in the pipeline and [Prodigy](https://prodi.gy) integrates them into the annotation workflow.\n\n### Advantages of multi-task prompts compared to pipelines\n\n- **Simplicity**: Only one model to deploy or call by API. That means less code, infrastructure, and documentation to maintain. It also requires less knowledge about various model architectures. The is article showed that it's possible to build a multi-task prompt pipeline with just a few lines of code.\n- **Easy upgrading**: If the LLM gets better, all tasks benefit from it. No need to retrain specialized models. When OpenAI releases GPT-5, one could switch to it with a single line of code.\n- **Easy extension**: If we want to add a new label, we just add it to the schema and we're done. Same with adding a new task, e.g. summarization.\n- **Cheaper than chained LLM calls**: If we were to call an LLM separately for each step, we'd have to send over the text multiple times. That's more expensive than sending it once and getting all the analysis in one go. But it may still be more expensive than a chain of specialized models.\n\n### Disadvantages of multi-task prompts compared to pipelines\n\n- **Tempts to skip validation**: Wouldn't it be nice to just trust that the LLM gets it right? Unfortunately, we can't. LLMs still suffer from hallucinations, biases, and other problems.\n- **Lack of modularity**: Can't reuse one task in another pipeline and can't use specialized models that others have trained.\n- **New error types**: JSON parsing errors, use of labels that are not in the schema.\n- **Monolithic model**: If you wish to fine-tune the LLM, it must be trained on all tasks at once. Training data must be available for all tasks. If you want to add a new task, you have to retrain the whole model.\n- **High inference cost**: Compared to efficient models like DistilBERT that comfortably run on a single GPU from a few years ago, LLMs are very expensive to run, requiring a cluster of the latest GPUs.\n- **High latency**: LLMs have to do a lot more matrix multiplication than smaller models. That means they take longer to respond, which is a problem for interactive applications.\n\nTo conclude, I see unvalidated multi-task prompts as a tool for low-stakes exploratory work. If proper validation is added they can be viable in batch processing scenarios where simplicity is valued over modularity and computational efficiency.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.26.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}